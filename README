DESCRIPTION:

  CL-DOT is a small package for easily generating dot (a program in the
  GraphViz suite) output from arbitrary Lisp data.

USAGE:

  First, define methods for the generic functions in the OBJECT- protocol
  for all objects that can appear in your graph. OBJECT-NODE must be
  defined for all objects, the others have a default implementation.
  For example:

    ;; Conses
    (defmethod cl-dot:object-node ((object cons))
      (make-instance 'cl-dot:node
                     :attributes '(:label "cell \\N"
                                   :shape :box)))

    (defmethod cl-dot:object-points-to ((object cons))
      (list (car object)
            (make-instance 'cl-dot:attributed
                           :object (cdr object)
                           :attributes '(:weight 3))))

    ;; Symbols
    (defmethod cl-dot:object-node ((object symbol))
      (make-instance 'cl-dot:node
                     :attributes `(:label ,object
                                   :shape :hexagon
                                   :style :filled
                                   :color :black
                                   :fillcolor "#ccccff")))

  To generate a graph object for your data, call GENERATE-GRAPH. From
  the graph object you can either generate dot-format output to some
  stream with PRINT-GRAPH, or call `dot` directly on the data with
  DOT-GRAPH. For example:

    (let* ((data '(a b c #1=(b z) c d #1#))
           (graph (cl-dot:generate-graph data)))
      (cl-dot:dot-graph graph "/tmp/test.ps"))

  You can also specify attributes for the whole graph:

    (let* ((data '(a b c #1=(b z) c d #1#))
           (graph (cl-dot:generate-graph data '(:rankdir "LR"))))
      (cl-dot:dot-graph graph "/tmp/test.ps"))

EXPORTED SYMBOLS:

Variables

  *DOT-PATH*
    Path to `dot`

Functions

  (GENERATE-GRAPH OBJECT &OPTIONAL ATTRIBUTES)
    Construct a GRAPH with ATTRIRBUTES starting from OBJECT, using the
    OBJECT- protocol.

  (DOT-GRAPH GRAPH OUTFILE)
    Generate a Postscript representation of GRAPH to OUTFILE, by running
    the program in *DOT-PATH*.

  (PRINT-GRAPH GRAPH &OPTIONAL (STREAM *STANDARD-OUTPUT*))
    Print a dot-format representation GRAPH to STREAM.

Generic Functions

  (OBJECT-NODE OBJECT)
    Return a NODE instance for this object, or NIL. In the latter case
    the object will not be included in the graph, but it can still have an
    indirect effect via other protocol functions (e.g. OBJECT-KNOWS-OF).
    This function will only be called once for each object during the
    generation of a graph.

  (OBJECT-POINTED-TO-BY OBJECT)
    Return a list of objects to which the NODE of this object should be
    connected. The edges will be directed from the other objects to this
    one. To assign dot attributes to the generated edges, each object can
    optionally be wrapped in a instance of ATTRIBUTED.

  (OBJECT-KNOWS-OF OBJECT)
    Return a list of objects that this object knows should be part of the
    graph, but which it has no direct connections to.

  (OBJECT-POINTS-TO OBJECT)
    Return a list of objects to which the NODE of this object should be
    connected. The edges will be directed from this object to the others.
    To assign dot attributes to the generated edges, each object can optionally
    be wrapped in a instance of ATTRIBUTED.

Classes

  ATTRIBUTED
    Wraps an object (initarg :OBJECT) with `dot` attribute
    information (a plist, initarg :ATTRIBUTES)

  NODE
    A graph node with `dot` attributes (a plist, initarg
    :ATTRIBUTES) and an optional `dot` id (initarg :ID, autogenerated
    by default).
